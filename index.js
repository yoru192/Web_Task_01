const cakesData = [
    {
        id: 1,
        title: "–®–æ–∫–æ–ª–∞–¥–Ω–∏–π —Ä–∞–π",
        price: 550,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23D2691E'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%23654321'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='white' font-size='16'%3Eüç∞%3C/text%3E%3C/svg%3E",
        weight: "1.2",
        category: 3,
        description: "–†–æ–∑–∫—ñ—à–Ω–∏–π —à–æ–∫–æ–ª–∞–¥–Ω–∏–π —Ç–æ—Ä—Ç –∑ –Ω—ñ–∂–Ω–∏–º –∫—Ä–µ–º–æ–º —Ç–∞ –±–µ–ª—å–≥—ñ–π—Å—å–∫–∏–º —à–æ–∫–æ–ª–∞–¥–æ–º",
        rating: 9.5
    },
    {
        id: 2,
        title: "–ü–æ–ª—É–Ω–∏—á–Ω–µ –¥–∏–≤–æ",
        price: 480,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23FFB6C1'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%23FF1493'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='white' font-size='16'%3Eüçì%3C/text%3E%3C/svg%3E",
        weight: "1.0",
        category: 1,
        description: "–õ—ñ—Ç–Ω–∏–π —Ç–æ—Ä—Ç –∑ —Å–≤—ñ–∂–∏–º–∏ –ø–æ–ª—É–Ω–∏—Ü—è–º–∏ —Ç–∞ –≤–µ—Ä—à–∫–æ–≤–∏–º –º—É—Å—Å–æ–º",
        rating: 9.2
    },
    {
        id: 3,
        title: "–í–∞–Ω—ñ–ª—å–Ω–∞ –∫–ª–∞—Å–∏–∫–∞",
        price: 420,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23FFF8DC'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%23F5DEB3'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='%23654321' font-size='16'%3Eüç∞%3C/text%3E%3C/svg%3E",
        weight: "1.1",
        category: 2,
        description: "–ö–ª–∞—Å–∏—á–Ω–∏–π –≤–∞–Ω—ñ–ª—å–Ω–∏–π —Ç–æ—Ä—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Ü—ñ–Ω—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤ —Ç—Ä–∞–¥–∏—Ü—ñ–π",
        rating: 8.8
    },
    {
        id: 4,
        title: "–õ–∏–º–æ–Ω–Ω–∞ —Å–≤—ñ–∂—ñ—Å—Ç—å",
        price: 390,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23FFFACD'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%23FFD700'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='%23654321' font-size='16'%3Eüçã%3C/text%3E%3C/svg%3E",
        weight: "0.9",
        category: 1,
        description: "–û—Å–≤—ñ–∂–∞—é—á–∏–π –ª–∏–º–æ–Ω–Ω–∏–π —Ç–æ—Ä—Ç –∑ —Ü–∏—Ç—Ä—É—Å–æ–≤–∏–º –∞—Ä–æ–º–∞—Ç–æ–º —Ç–∞ –ª–∏–º–æ–Ω–Ω–∏–º –∫—Ä–µ–º–æ–º",
        rating: 8.9
    },
    {
        id: 5,
        title: "–¢—ñ—Ä–∞–º—ñ—Å—É –¥–µ–ª—é–∫—Å",
        price: 620,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23D2B48C'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%238B4513'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='white' font-size='16'%3E‚òï%3C/text%3E%3C/svg%3E",
        weight: "1.3",
        category: 3,
        description: "–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∏–π –¥–µ—Å–µ—Ä—Ç –∑ –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ, —Å–∞–≤–æ—è—Ä–¥—ñ —Ç–∞ –∞—Ä–æ–º–∞—Ç–Ω–æ—é –∫–∞–≤–æ—é",
        rating: 9.7
    },
    {
        id: 6,
        title: "–ú–µ–¥–æ–≤–∏–∫ –æ—Å–æ–±–ª–∏–≤–∏–π",
        price: 510,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23DAA520'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%23B8860B'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='white' font-size='16'%3EüçØ%3C/text%3E%3C/svg%3E",
        weight: "1.4",
        category: 2,
        description: "–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –º–µ–¥–æ–≤–∏–∫ –∑ –Ω—ñ–∂–Ω–∏–º —Å–º–µ—Ç–∞–Ω–Ω–∏–º –∫—Ä–µ–º–æ–º —Ç–∞ –º–µ–¥–æ–≤–∏–º –∞—Ä–æ–º–∞—Ç–æ–º",
        rating: 9.1
    },
    {
        id: 7,
        title: "–ß–æ—Ä–Ω–∏—á–Ω–∏–π –±–ª—é–∑",
        price: 460,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%239370DB'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%234B0082'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='white' font-size='16'%3EüßÅ%3C/text%3E%3C/svg%3E",
        weight: "1.0",
        category: 1,
        description: "–ù—ñ–∂–Ω–∏–π —Ç–æ—Ä—Ç –∑ –ª—ñ—Å–æ–≤–∏–º–∏ —á–æ—Ä–Ω–∏—Ü—è–º–∏ —Ç–∞ –≤–µ—Ä—à–∫–æ–≤–∏–º –∫—Ä–µ–º–æ–º",
        rating: 9.0
    },
    {
        id: 8,
        title: "–ö–∞—Ä–∞–º–µ–ª—å–Ω–∏–π —Å–æ–Ω",
        price: 540,
        imageUrl: "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23DEB887'/%3E%3Ccircle cx='150' cy='100' r='60' fill='%23CD853F'/%3E%3Ctext x='150' y='110' text-anchor='middle' fill='white' font-size='16'%3EüçÆ%3C/text%3E%3C/svg%3E",
        weight: "1.2",
        category: 2,
        description: "–í–∏—à—É–∫–∞–Ω–∏–π —Ç–æ—Ä—Ç –∑ –∫–∞—Ä–∞–º–µ–ª—å–Ω–∏–º –∫—Ä–µ–º–æ–º —Ç–∞ —Å–æ–ª–æ–Ω–æ—é –∫–∞—Ä–∞–º–µ–ª–ª—é",
        rating: 9.3
    }
];

const appState = {
    currentCategory: 0,
    cartItems: [],
    currentPage: 'home',
    isSearching: false,
    searchQuery: ''
};

const dom = {
    homePage: null,
    cartPage: null,
    productPage: null,
    itemsContainer: null,
    cartContent: null,
    productDetails: null,
    cartTotal: null,
    cartCount: null,
    title: null,
    searchInput: null
};

document.addEventListener('DOMContentLoaded', initializeApp);

function showHome() {
    updatePageVisibility('home');
    appState.currentPage = 'home';
    displayItems();
}

function showCart() {
    updatePageVisibility('cart');
    appState.currentPage = 'cart';
    displayCart();
}

function showProduct(productId) {
    const product = cakesData.find(cake => cake.id === productId);
    if (product) {
        updatePageVisibility('product');
        appState.currentPage = 'product';
        displayProductPage(product);
        trackProductView(productId);
    }
}

function updatePageVisibility(activePage) {
    const pages = ['home', 'cart', 'product'];
    pages.forEach(page => {
        const element = dom[`${page}Page`];
        if (element) {
            element.classList.toggle('hidden', page !== activePage);
        }
    });
}

function setupSearchInput() {
    if (!dom.searchInput) return;

    dom.searchInput.addEventListener('input', handleSearchInput);
    dom.searchInput.addEventListener('keydown', handleSearchKeydown);

    dom.searchInput.addEventListener('focus', function() {
        if (this.value === '–ü–æ—à—É–∫...') {
            this.value = '';
        }
    });
}

function handleSearchInput(e) {
    const query = e.target.value.trim();
    appState.searchQuery = query;

    clearTimeout(appState.searchTimeout);
    appState.searchTimeout = setTimeout(() => {
        performSearch(query);
    }, 300);
}

function handleSearchKeydown(e) {
    if (e.key === 'Enter') {
        e.preventDefault();
        performSearch(e.target.value.trim());
    }
}

function performSearch(searchTerm) {
    if (!dom.itemsContainer) return;

    appState.isSearching = Boolean(searchTerm);

    if (!searchTerm) {
        displayItems();
        updateTitle();
        return;
    }

    const results = searchCakes(searchTerm);

    if (results.length === 0) {
        dom.itemsContainer.innerHTML = `
            <div class="no-results">
                <p>–ó–∞ –∑–∞–ø–∏—Ç–æ–º "${searchTerm}" –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
                <button class="button button--primary" onclick="clearSearch()">–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ—Ä—Ç–∏</button>
            </div>
        `;
        return;
    }

    dom.itemsContainer.innerHTML = results.map(createItemHTML).join('');
}

function searchCakes(searchTerm) {
    const term = searchTerm.toLowerCase();
    return cakesData.filter(cake =>
        cake.title.toLowerCase().includes(term) ||
        cake.description.toLowerCase().includes(term)
    );
}

function clearSearch() {
    if (dom.searchInput) {
        dom.searchInput.value = '';
    }

    appState.isSearching = false;
    appState.searchQuery = '';
    appState.currentCategory = 0;

    // Reset category selection
    document.querySelectorAll('.categories li').forEach(li => li.classList.remove('active'));
    const firstCategory = document.querySelector('.categories li');
    if (firstCategory) {
        firstCategory.classList.add('active');
    }

    displayItems();
    updateTitle();
    showHome();
}

function filterCategory(categoryId, element) {
    if (appState.isSearching) {
        clearSearch();
        return;
    }

    appState.currentCategory = categoryId;

    document.querySelectorAll('.categories li').forEach(li => li.classList.remove('active'));

    if (element) {
        element.classList.add('active');
    } else {
        const categoryItems = document.querySelectorAll('.categories li');
        if (categoryItems[categoryId]) {
            categoryItems[categoryId].classList.add('active');
        }
    }

    displayItems();
    updateTitle();

    // If called from footer, navigate to home
    if (!element) {
        showHome();
        scrollToTop();
    }
}

function updateTitle() {
    if (appState.isSearching) return;

    const titles = {
        0: "–í—Å—ñ —Ç–æ—Ä—Ç–∏",
        1: "–§—Ä—É–∫—Ç–æ–≤—ñ —Ç–æ—Ä—Ç–∏",
        2: "–í–∞–Ω—ñ–ª—å–Ω—ñ —Ç–æ—Ä—Ç–∏",
        3: "–®–æ–∫–æ–ª–∞–¥–Ω—ñ —Ç–æ—Ä—Ç–∏"
    };

    if (dom.title) {
        dom.title.textContent = titles[appState.currentCategory] || "–í—Å—ñ —Ç–æ—Ä—Ç–∏";
    }
}

function displayItems() {
    if (!dom.itemsContainer) return;

    if (appState.isSearching) {
        performSearch(appState.searchQuery);
        return;
    }

    const filteredItems = appState.currentCategory === 0
        ? cakesData
        : cakesData.filter(item => item.category === appState.currentCategory);

    if (filteredItems.length === 0) {
        dom.itemsContainer.innerHTML = '<div class="no-items"><p>–¢–æ—Ä—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï</p></div>';
        return;
    }

    dom.itemsContainer.innerHTML = filteredItems.map(createItemHTML).join('');
}

function createItemHTML(item) {
    return `
        <div class="item-block-wrapper">
            <div class="item-block">
                <img class="item-block__image" 
                     src="${item.imageUrl}" 
                     alt="${item.title}" 
                     onclick="showProduct(${item.id})"
                     onerror="handleImageError(this)">
                <h4 class="item-block__title" onclick="showProduct(${item.id})">${item.title}</h4>
                <div class="item-block__weight">${item.weight} –∫–≥</div>
                <div class="item-block__bottom">
                    <div class="item-block__price-wrapper">
                        <div class="item-block__price">${item.price} –≥—Ä–Ω</div>
                        <button onclick="addToCart(${item.id})" class="button button--outline button--add">
                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M10.8 4.8H7.2V1.2C7.2 0.5373 6.6627 0 6 0C5.3373 0 4.8 0.5373 4.8 1.2V4.8H1.2C0.5373 4.8 0 5.3373 0 6C0 6.6627 0.5373 7.2 1.2 7.2H4.8V10.8C4.8 11.4627 5.3373 12 6 12C6.6627 12 7.2 11.4627 7.2 10.8V7.2H10.8C11.4627 7.2 12 6.6627 12 6C12 5.3373 11.4627 4.8 10.8 4.8Z" fill="currentColor"/>
                            </svg>
                            <span>–î–æ–¥–∞—Ç–∏</span>
                            <i>${getItemCount(item.id)}</i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function getSpecificationByCategory(category, type) {
    const specifications = {
        1: { // –§—Ä—É–∫—Ç–æ–≤—ñ
            base: '–ë—ñ—Å–∫–≤—ñ—Ç–Ω–∞ –∑ —Ñ—Ä—É–∫—Ç–æ–≤–∏–º–∏ –Ω–æ—Ç–∫–∞–º–∏',
            filling: '–°–≤—ñ–∂—ñ —Ñ—Ä—É–∫—Ç–∏ —Ç–∞ —è–≥–æ–¥–∏, –ª–µ–≥–∫–∏–π –∫—Ä–µ–º',
            decor: '–°–≤—ñ–∂—ñ —è–≥–æ–¥–∏, —Ñ—Ä—É–∫—Ç–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏'
        },
        2: { // –í–∞–Ω—ñ–ª—å–Ω—ñ
            base: '–ö–ª–∞—Å–∏—á–Ω–∞ –≤–∞–Ω—ñ–ª—å–Ω–∞ –±—ñ—Å–∫–≤—ñ—Ç–Ω–∞',
            filling: '–í–∞–Ω—ñ–ª—å–Ω–∏–π –∫—Ä–µ–º, –º–∞—Å–ª–æ –≤–µ—Ä—à–∫–æ–≤–µ',
            decor: '–í–∞–Ω—ñ–ª—å–Ω–∞ –≥–ª–∞–∑—É—Ä, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏'
        },
        3: { // –®–æ–∫–æ–ª–∞–¥–Ω—ñ
            base: '–®–æ–∫–æ–ª–∞–¥–Ω–∞ –±—ñ—Å–∫–≤—ñ—Ç–Ω–∞ –∑ –∫–∞–∫–∞–æ',
            filling: '–®–æ–∫–æ–ª–∞–¥–Ω–∏–π –∫—Ä–µ–º, –≥–æ—Ä—ñ—Ö–∏',
            decor: '–®–æ–∫–æ–ª–∞–¥–Ω–∞ –≥–ª–∞–∑—É—Ä, –∫–∞–∫–∞–æ-–¥–µ–∫–æ—Ä'
        }
    };

    const spec = specifications[category] || specifications[2];
    return spec[type] || '–ö–ª–∞—Å–∏—á–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è';
}

function addToCart(productId) {
    const product = cakesData.find(cake => cake.id === productId);
    if (!product) return;

    const existingItem = appState.cartItems.find(item => item.id === productId);

    if (existingItem) {
        existingItem.quantity++;
    } else {
        appState.cartItems.push({
            id: productId,
            name: `–¢–æ—Ä—Ç "${product.title}"`,
            price: product.price,
            quantity: 1
        });
    }

    updateCartUI();
    displayItems();
    showNotification(`${product.title} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!`, 'success');
    trackAddToCart(productId, 1);
}

function removeFromCart(productId) {
    const itemIndex = appState.cartItems.findIndex(item => item.id === productId);
    if (itemIndex === -1) return;

    appState.cartItems.splice(itemIndex, 1);
    updateCartUI();
    displayCart();
    displayItems();
    showNotification('–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞', 'warning');
}

function updateQuantity(productId, newQuantity) {
    if (newQuantity <= 0) {
        removeFromCart(productId);
        return;
    }

    const item = appState.cartItems.find(item => item.id === productId);
    if (item) {
        item.quantity = newQuantity;
        updateCartUI();
        displayCart();
        displayItems();
    }
}

function getItemCount(productId) {
    const item = appState.cartItems.find(item => item.id === productId);
    return item ? item.quantity : 0;
}

function updateCartUI() {
    const total = appState.cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalItems = appState.cartItems.reduce((sum, item) => sum + item.quantity, 0);

    if (dom.cartTotal) dom.cartTotal.textContent = `${total} ‚Ç¥`;
    if (dom.cartCount) dom.cartCount.textContent = totalItems;
}

function displayCart() {
    if (!dom.cartContent) return;

    if (appState.cartItems.length === 0) {
        dom.cartContent.innerHTML = createEmptyCartHTML();
        return;
    }

    const total = appState.cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalItems = appState.cartItems.reduce((sum, item) => sum + item.quantity, 0);

    dom.cartContent.innerHTML = createCartHTML(appState.cartItems, total, totalItems);
}

function createEmptyCartHTML() {
    return `
        <div class="cart--empty">
            <div class="empty-cart-icon">üõí</div>
            <h2>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</h2>
            <p>–°—Ö–æ–∂–µ, –≤–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Å–º–∞—á–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞ –¥–æ —Å–≤–æ–≥–æ –∫–æ—à–∏–∫–∞. –ß–∞—Å —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏!</p>
            <button class="button button--primary" onclick="showHome()">–û–±—Ä–∞—Ç–∏ —Ç–æ—Ä—Ç</button>
        </div>
    `;
}

function createCartHTML(items, total, totalItems) {
    return `
        <div class="cart__header">
            <span>–¢–æ–≤–∞—Ä</span>
            <span>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</span>
            <span>–¶—ñ–Ω–∞</span>
            <span>–°—É–º–∞</span>
            <span></span>
        </div>

        ${items.map(item => `
            <div class="cart__item">
                <div class="cart__item-info">
                    <h3>${item.name}</h3>
                </div>
                <div class="cart__item-quantity">
                    <button onclick="updateQuantity(${item.id}, ${item.quantity - 1})" class="button button--circle plus-btn">-</button>
                    <span>${item.quantity} —à—Ç.</span>
                    <button onclick="updateQuantity(${item.id}, ${item.quantity + 1})" class="button button--circle minus-btn">+</button>
                </div>
                <div class="cart__item-price">${item.price} –≥—Ä–Ω</div>
                <div class="cart__item-total">
                    <b>${item.price * item.quantity} –≥—Ä–Ω</b>
                </div>
                <div class="cart__item-remove">
                    <button onclick="removeFromCart(${item.id})" class="button button--circle">
                        <svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 1L9 9M1 9L9 1" stroke="#0d3b66" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                </div>
            </div>
        `).join('')}

        <div class="cart__summary">
            <div class="cart__summary-row">
                <span>–£—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:</span>
                <b>${totalItems} —à—Ç.</b>
            </div>
            <div class="cart__summary-row total">
                <span>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</span>
                <b>${total} –≥—Ä–Ω</b>
            </div>
        </div>

        <div class="cart__actions">
            <button class="button button--back" onclick="showHome()">
                <svg width="10" height="10" viewBox="0 0 8 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7 13L1 7L7 1" stroke="#D3D3D3" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥
            </button>
            <button class="button button--primary" onclick="showOrderForm()">–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</button>
        </div>
    `;
}

function displayProductPage(product) {
    if (!dom.productDetails) return;

    const specifications = {
        base: getSpecificationByCategory(product.category, 'base'),
        filling: getSpecificationByCategory(product.category, 'filling'),
        decor: getSpecificationByCategory(product.category, 'decor')
    };

    dom.productDetails.innerHTML = createProductHTML(product, specifications);
}

function createProductHTML(product, specifications) {
    return `
        <h1 class="product-title">–¢–æ—Ä—Ç "${product.title}" ${product.weight} –∫–≥</h1>

        <div class="product-image">
            <img src="${product.imageUrl}" alt="${product.title}" onerror="handleImageError(this)" />
        </div>

        <div class="price-badge">
            <span>–¶—ñ–Ω–∞: ${product.price} –≥—Ä–Ω</span>
        </div>

        <div class="specifications">
            <h2>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä—Ç–∞</h2>
            <table>
                <tbody>
                    <tr><td>–í–∞–≥–∞</td><td>${product.weight} –∫–≥</td></tr>
                    <tr><td>–û—Å–Ω–æ–≤–∞</td><td>${specifications.base}</td></tr>
                    <tr><td>–ù–∞—á–∏–Ω–∫–∞</td><td>${specifications.filling}</td></tr>
                    <tr><td>–î–µ–∫–æ—Ä</td><td>${specifications.decor}</td></tr>
                    <tr><td>–†–µ–π—Ç–∏–Ω–≥</td><td>‚≠ê ${product.rating}/10</td></tr>
                    <tr><td>–¢–µ—Ä–º—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è</td><td>48 –≥–æ–¥–∏–Ω (–≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É)</td></tr>
                </tbody>
            </table>
        </div>

        <div class="product-description">
            <h2>–û–ø–∏—Å —Ç–æ—Ä—Ç–∞ "${product.title}"</h2>
            <p>${product.description}</p>
        </div>

        <div class="product-features">
            <div class="feature-block">
                <h3>üèÜ –ü–µ—Ä–µ–≤–∞–≥–∏</h3>
                <ul>
                    <li>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤</li>
                    <li>–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω</li>
                    <li>–ë–µ–∑ —à—Ç—É—á–Ω–∏—Ö –±–∞—Ä–≤–Ω–∏–∫—ñ–≤</li>
                    <li>–°–≤—ñ–∂–∞ –≤–∏–ø—ñ—á–∫–∞ —â–æ–¥–Ω—è</li>
                </ul>
            </div>

            <div class="feature-block">
                <h3>‚≠ê –†–µ–π—Ç–∏–Ω–≥</h3>
                <div class="rating">${product.rating || 9.0}/10 (127 –≤—ñ–¥–≥—É–∫—ñ–≤)</div>
            </div>
        </div>

        <div class="order-notice">
            <p>* –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è –∑–∞ 3 –¥–Ω—ñ –¥–æ –¥–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è.<br>* –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è.</p>
        </div>

        <div class="cart__actions" style="margin-top: 30px;">
            <button class="button button--back" onclick="showHome()">
                <svg width="10" height="10" viewBox="0 0 8 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7 13L1 7L7 1" stroke="#D3D3D3" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥
            </button>
            <button class="button button--primary" onclick="addToCart(${product.id})">
                –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
            </button>
        </div>
    `;
}

function showOrderForm() {
    if (appState.cartItems.length === 0) {
        showNotification('–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.', 'warning');
        return;
    }

    const total = appState.cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalItems = appState.cartItems.reduce((sum, item) => sum + item.quantity, 0);

    if (dom.cartContent) {
        dom.cartContent.innerHTML = createOrderFormHTML(appState.cartItems, total, totalItems);
    }
}

function createOrderFormHTML(items, total, totalItems) {
    return `
        <div class="checkout-container">
            <div class="checkout-header">
                <h1>–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>
            </div>
            
            <div class="checkout-content">
                <div class="cart-items-table">
                    <div class="table-header">
                        <span class="column product">–¢–æ–≤–∞—Ä</span>
                        <span class="column quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</span>
                        <span class="column price">–¶—ñ–Ω–∞</span>
                        <span class="column total">–°—É–º–∞</span>
                    </div>
                    
                    ${items.map(item => `
                        <div class="table-row">
                            <span class="column product">${item.name}</span>
                            <span class="column quantity">${item.quantity} —à—Ç.</span>
                            <span class="column price">${item.price} –≥—Ä–Ω</span>
                            <span class="column total">${item.price * item.quantity} –≥—Ä–Ω</span>
                        </div>
                    `).join('')}
                    
                    <div class="table-footer">
                        <div class="total-row">
                            <span>–£—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:</span>
                            <span>${totalItems} —à—Ç.</span>
                        </div>
                        <div class="total-row">
                            <span>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</span>
                            <span class="total-amount">${total} –≥—Ä–Ω</span>
                        </div>
                    </div>
                </div>
                
                <div class="delivery-details">
                    <h2>–î–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
                    <p class="required-fields">* –í—Å—ñ –ø–æ–ª—è –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ</p>
                    
                    <form class="delivery-form" onsubmit="submitOrder(event)">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="name">–Ü–º'—è*</label>
                                <input type="text" id="name" name="name" required>
                            </div>
                            <div class="form-group">
                                <label for="city">–ú—ñ—Å—Ç–æ*</label>
                                <input type="text" id="city" name="city" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="surname">–ü—Ä—ñ–∑–≤–∏—â–µ*</label>
                                <input type="text" id="surname" name="surname" required>
                            </div>
                            <div class="form-group">
                                <label for="address">–ê–¥—Ä–µ—Å–∞*</label>
                                <input type="text" id="address" name="address" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="email">E-mail*</label>
                                <input type="email" id="email" name="email" required>
                            </div>
                            <div class="form-group">
                                <label for="postalCode">–ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å*</label>
                                <input type="text" id="postalCode" name="postalCode" required>
                            </div>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="phone">–¢–µ–ª–µ—Ñ–æ–Ω*</label>
                                <input type="tel" id="phone" name="phone" required>
                            </div>
                            <div class="form-group">
                                <label for="comments">–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</label>
                                <textarea id="comments" name="comments" rows="3" placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è..."></textarea>
                            </div>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="back-button" onclick="showCart()">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥</button>
                            <button type="submit" class="order-button">–ó–∞–º–æ–≤–∏—Ç–∏!</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    `;
}

function submitOrder(event) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const orderData = Object.fromEntries(formData.entries());

    // Validate required fields
    const requiredFields = ['name', 'surname', 'email', 'phone', 'city', 'address', 'postalCode'];
    const emptyFields = requiredFields.filter(field => !orderData[field]?.trim());

    if (emptyFields.length > 0) {
        showNotification(`–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è`, 'error');
        return;
    }

    // Validate email
    if (!isValidEmail(orderData.email)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É', 'error');
        return;
    }

    // Validate phone
    if (!isValidPhone(orderData.phone)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', 'error');
        return;
    }

    if(!isValidPostalCode(orderData.postalCode)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å', 'error');
        return;
    }

    if(!isValidTextualField(orderData.name)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º\'—è', 'error');
        return;
    }

    if(!isValidTextualField(orderData.surname)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ', 'error');
        return;
    }

    if(!isValidTextualField(orderData.city)) {
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –º—ñ—Å—Ç–æ', 'error');
        return;
    }


    const total = appState.cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    // Process order
    showNotification(`–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, ${orderData.name}! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É ${total} –≥—Ä–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`, 'success');

    trackPurchase(orderData, total);

    // Clear cart and return to home
    appState.cartItems = [];
    updateCartUI();
    showHome();
}

// Validation functions
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function isValidPhone(phone) {
    const phoneRegex = /^[+]?[0-9\s\-()]{10,}$/;
    return phoneRegex.test(phone);
}

function isValidPostalCode(postalCode) {
    const postalCodeRegex = /^\d{5}$/;
    return postalCodeRegex.test(postalCode);
}

function isValidTextualField(text) {
    const textRegex = /^[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—îA-Za-z]+$/;
    return textRegex.test(text);
}

// Notification system
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification--${type}`;
    notification.textContent = message;

    const styles = {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '15px 20px',
        borderRadius: '5px',
        color: 'white',
        zIndex: '1000',
        opacity: '0',
        transform: 'translateX(100%)',
        transition: 'all 0.3s ease',
        maxWidth: '350px',
        wordWrap: 'break-word',
        fontSize: '14px'
    };

    Object.assign(notification.style, styles);

    // Set background color based on type
    const bgColors = {
        success: '#28a745',
        error: '#dc3545',
        warning: '#ffc107',
        info: '#0d3b66'
    };

    notification.style.background = bgColors[type] || bgColors.info;
    if (type === 'warning') notification.style.color = '#333';

    document.body.appendChild(notification);

    // Animate in
    requestAnimationFrame(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    });

    // Animate out and remove
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 4000);
}

function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

function handleImageError(img) {
    img.src = "data:image/svg+xml,%3Csvg viewBox='0 0 300 200' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='300' height='200' fill='%23f8f9fa'/%3E%3Ctext x='150' y='100' text-anchor='middle' fill='%23666' font-size='16'%3E–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ%3C/text%3E%3C/svg%3E";
}

function trackEvent(eventName, data) {
    console.log('Event tracked:', eventName, data);
}

function trackProductView(productId) {
    trackEvent('product_view', { product_id: productId });
}

function trackAddToCart(productId, quantity) {
    trackEvent('add_to_cart', { product_id: productId, quantity: quantity });
}

function trackPurchase(orderData, total) {
    trackEvent('purchase', { order_data: orderData, total: total });
}

function cacheDOMElements() {
    dom.homePage = document.getElementById('home-page');
    dom.cartPage = document.getElementById('cart-page');
    dom.productPage = document.getElementById('product-page');
    dom.itemsContainer = document.getElementById('items-container');
    dom.cartContent = document.getElementById('cart-content');
    dom.productDetails = document.getElementById('product-details');
    dom.cartTotal = document.getElementById('cart-total');
    dom.cartCount = document.getElementById('cart-count');
    dom.searchInput = document.getElementById('search__input');
    dom.title = document.querySelector('.content__title');

}

function initializeApp() {
    cacheDOMElements();

    const yearElement = document.getElementById('current-year');
    if (yearElement) {
        yearElement.textContent = new Date().getFullYear();
    }

    displayItems();
    updateCartUI();
    updateTitle();

    document.addEventListener('keydown', handleKeyboardShortcuts);

    console.log('Cake shop application initialized successfully');
}

function handleKeyboardShortcuts(e) {
    if (e.key === 'Escape') {
        showHome();
    }
}

